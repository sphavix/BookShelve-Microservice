@page "/authors/create/"
@inject IAuthorService _authorService
@inject NavigationManager _navManager

<h3>Add New Author</h3>

<EditForm Model="Author" OnInvalidSubmit="HandleCreateAuthor">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="firstname">First Name</label>
        <InputText @bind-Value="Author.FirstName" class="form-control" id="firstname" />
        <ValidationMessage For="@(() => Author.FirstName)" />
    </div>

    <div class="form-group">
        <label for="lastname">Last Name</label>
        <InputText @bind-Value="Author.LastName" class="form-control" id="lastname" />
        <ValidationMessage For="@(() => Author.LastName)" />
    </div>

    <div class="form-group">
        <label for="bio">Biography</label>
        <InputTextArea @bind-Value="Author.Bio" class="form-control" id="bio" />
        <ValidationMessage For="@(() => Author.Bio)" />
    </div>
    <br />

    <button class="btn btn-success" type="submit">
        <span class="oi oi-envelope-closed"></span>
        Add Author
    </button>

    <button @onclick="BackToList" class="btn btn-secondary">
        <span class="oi oi-media-step-backward"></span>
        Cancel
    </button>

</EditForm>

@code {
    private CreateAuthorDto Author = new();

    private async Task HandleCreateAuthor()
    {
        var response = await _authorService.CreateAuthorAsync(Author);

        if(response.IsSuccess)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/authors/");
    }
}
